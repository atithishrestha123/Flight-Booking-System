package bcu.cmp5332.bookingsystem.commands;

import bcu.cmp5332.bookingsystem.main.FlightBookingSystemException;
import bcu.cmp5332.bookingsystem.model.Customer;
import bcu.cmp5332.bookingsystem.model.FlightBookingSystem;

/**
 * The AddCustomer class represents a command to add a new customer to the Flight Booking System.
 * It implements the Command interface and contains methods to execute the command.
 * 
 * <p>
 * This class takes three parameters - name, phone, and email - to create a new customer.
 * When executed, it creates a new Customer object with the provided details, assigns a unique
 * customer ID generated by the FlightBookingSystem, adds the customer to the system, and prints
 * a confirmation message with the customer's ID.
 * </p>
 * 
 * <p>
 * Example usage:
 * <pre>{@code
 * String name = "John Doe";
 * String phone = "123-456-7890";
 * String email = "john@example.com";
 * AddCustomer addCustomerCommand = new AddCustomer(name, phone, email);
 * addCustomerCommand.execute(flightBookingSystem);
 * }</pre>
 * </p>
 */

public class AddCustomer implements Command {

    private final String name;
    private final String phone;
    private final String email;

    /**
     * Constructs an AddCustomer object with the specified name, phone, and email address.
     * 
     * @param name The name of the customer.
     * @param phone The phone number of the customer.
     * @param email The email address of the customer.
     */
    
    public AddCustomer(String name, String phone, String email) {
        this.name = name;
        this.phone = phone;
        this.email = email;
    }
    
    
    /**
     * Executes the command to add a new customer to the Flight Booking System.
     * 
     * @param flightBookingSystem The FlightBookingSystem instance to which the customer is being added.
     * @throws FlightBookingSystemException if an error occurs while adding the customer.
     */

    @Override
    public void execute(FlightBookingSystem flightBookingSystem) throws FlightBookingSystemException {
    	
    	// Create a new customer object with the provided details and assign a unique ID.
        Customer customer = new Customer(FlightBookingSystem.getNextCustomerId(), name, phone, email);
        
        // Add the customer to the Flight Booking System.
        flightBookingSystem.addCustomer(customer);
        
        // Print a confirmation message with the customer's ID.
        System.out.println("Customer added successfully with ID: " + customer.getId());
    }
}